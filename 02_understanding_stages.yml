# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  jobs:
  - job: FirstJob
    steps:
    - bash: echo build first job
    - bash: echo $(pipelineLevelVariable)
    - bash: echo $(Build.BuildNumber)
    - bash: echo $(Build.BuildId)
    - bash: echo $(Build.SourceBranchName)
    - bash: echo $(Build.SourceDirectory)
    - bash: echo $(System.DefaultworkingDirectory)
    - bash: ls -R $(System.DefaultworkingDirectory)
    - bash: echo $(Build.ArtifactStagingDirectory)
    - bash: java --version
    - bash: node --version
    - bash: python --version
    - bash: mvn --version
    - bash: ls -R $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultworkingDirectory)'
        Contents: |
          **/*.yaml
          **/*.tf
        TargetFolder: '$(build.ArtifactStagingDirectory)'
    - bash: ls -R $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
  # - job: SecondJob
  #   steps:
  #   - bash: echo build second job
    
# - stage: Devdeploy
#   variables:
#     environment: Dev
#   dependsOn: Build
#   jobs:
#   - job: Devdeploy
#     steps:
#     - bash: echo $(environment)Devdeploy
# - stage: QAdeploy
#   variables:
#     environment: QA
#   dependsOn: Build
#   jobs:
#   - job: QAdeploy
#     steps:
#     - bash: echo $(environment) deploy
# - stage: Proddeploy
#   dependsOn:
#   - Devdeploy
#   - QAdeploy
#   jobs:
#   - job: Proddeploy
#     steps:
#     - bash: echo build Proddeploy

